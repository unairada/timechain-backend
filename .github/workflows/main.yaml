name: Build Timechain-backend and Deploy in ECS
on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

jobs:
  # build:
  #   name: Build-image
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup AWS account creds
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-region: us-east-2
  #         ## the following creates an ARN based on the values entered into github secrets
  #         role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_DEPLOY_ROLE }}
  #         role-session-name: myGitHubActions

  #     # Hello from AWS: WhoAmI
  #     - name: Sts GetCallerIdentity
  #       run: |
  #         aws sts get-caller-identity

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2

  #     - name: Build, tag, and push docker image to Amazon ECR
  #       env:
  #         REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         REPOSITORY: timechain-backend
  #         IMAGE_TAG: ${{ github.sha }}
  #       run: |
  #         docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
  #         docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy image to ECS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: Setup AWS account creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-2
          ## the following creates an ARN based on the values entered into github secrets
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_DEPLOY_ROLE }}
          role-session-name: myGitHubActions
      - name: run terraform
        run: |
          cd deploy-aws
          terraform init -input=false
          terraform apply -input=false -auto-approve
